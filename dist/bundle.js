(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(15),r=t.n(o),a=t(645),A=t.n(a)()(r());A.push([e.id,'body {\n  background-color: white;\n}\n\n.header {\n  margin-bottom: 2%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #1abc9c !important;\n  color: white;\n  height: 23vh !important;\n  \n}\n\n.recent {\n  display: flex;\n  margin-left: 1.3%;\n  align-items: center;\n  justify-content: space-between;\n}\n\ntable {\n  margin-left: 1.25%;\n}\n\nth {\n  width: 100px;\n}\n\n.table {\n  border: solid 2px black;\n}\n\n.left_side {\n  width: 30%;\n}\n\n.content {\n  display: flex;\n  width: 60%;\n}\n\n.right_side {\n  margin-left: 120px;\n  width: 280px;\n}\n\n.input {\n  margin-bottom: 10px;\n  border: 2px double black;\n  width: 100%;\n}\n\n.submit {\n  width: 75px;\n  height: 30px;\n  border: double 2px black;\n  color: black;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 20px;\n  font-weight: 600;\n  background-color: white;\n}\n\n.align {\n  margin-top: 15px;\n  float: right;\n}\n.table {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  position: relative;\n  animation-name: example;\n  animation-duration: 4s;\n}\n\n@keyframes example {\n  0%   {background-color:red; left:0px; top:0px;}\n  25%  {background-color:yellow; left:200px; top:0px;}\n  50%  {background-color:blue; left:200px; top:200px;}\n  75%  {background-color:green; left:0px; top:200px;}\n  100% {background-color:red; left:0px; top:0px;}\n}\n\n.animate {\n  animation: pulse 5s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    background-color: #001F3F;\n  }\n  100% {\n    background-color: #FF4136;\n  }\n}\n\n.demo {\n  background-color: hsl(207, 9%, 19%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 10vw;\n  width: 100%;\n}\n\n.perspective-container {\n  perspective: 400px;\n}\n\n.card {\n  background-image: url(https://media.giphy.com/media/sIIhZliB2McAo/giphy.gif);\n  background-size: cover;\n  box-shadow: 0 0 140px 10px rgba(0,0,0,.5);\n  position: relative;\n  height: 150px;\n  width: 250px;\n  overflow: hidden; /* Try removing this to see how the sheen works! */\n  --sheenX: 0; /* Set these with JavaScript */\n  --sheenY: 0;\n}\n\n.card::after {\n  content: "";\n  position: absolute;\n  top: -400px;\n  right: -400px;\n  bottom: -400px;\n  left: -400px;\n  background: linear-gradient(217deg, rgba(255,255,255,0), rgba(255,255,255,0) 35%, rgba(255,255,255,0.25) 45%, rgba(255,255,255,.25) 50%, rgba(255,255,255,0) 60%, rgba(255,255,255,0) 100%);\n  transform: translateX(var(--sheenX)) translateY(var(--sheenY));\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,8BAA8B;EAC9B,YAAY;EACZ,uBAAuB;;AAEzB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,wBAAwB;EACxB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,YAAY;EACZ,qBAAqB;EACrB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,qBAAqB;EACrB,kBAAkB;EAClB,uBAAuB;EACvB,sBAAsB;AACxB;;AAEA;EACE,MAAM,oBAAoB,EAAE,QAAQ,EAAE,OAAO,CAAC;EAC9C,MAAM,uBAAuB,EAAE,UAAU,EAAE,OAAO,CAAC;EACnD,MAAM,qBAAqB,EAAE,UAAU,EAAE,SAAS,CAAC;EACnD,MAAM,sBAAsB,EAAE,QAAQ,EAAE,SAAS,CAAC;EAClD,MAAM,oBAAoB,EAAE,QAAQ,EAAE,OAAO,CAAC;AAChD;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE;IACE,yBAAyB;EAC3B;EACA;IACE,yBAAyB;EAC3B;AACF;;AAEA;EACE,mCAAmC;EACnC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,4EAA4E;EAC5E,sBAAsB;EACtB,yCAAyC;EACzC,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,gBAAgB,EAAE,kDAAkD;EACpE,WAAW,EAAE,8BAA8B;EAC3C,WAAW;AACb;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,cAAc;EACd,YAAY;EACZ,2LAA2L;EAC3L,8DAA8D;AAChE",sourcesContent:['body {\n  background-color: white;\n}\n\n.header {\n  margin-bottom: 2%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #1abc9c !important;\n  color: white;\n  height: 23vh !important;\n  \n}\n\n.recent {\n  display: flex;\n  margin-left: 1.3%;\n  align-items: center;\n  justify-content: space-between;\n}\n\ntable {\n  margin-left: 1.25%;\n}\n\nth {\n  width: 100px;\n}\n\n.table {\n  border: solid 2px black;\n}\n\n.left_side {\n  width: 30%;\n}\n\n.content {\n  display: flex;\n  width: 60%;\n}\n\n.right_side {\n  margin-left: 120px;\n  width: 280px;\n}\n\n.input {\n  margin-bottom: 10px;\n  border: 2px double black;\n  width: 100%;\n}\n\n.submit {\n  width: 75px;\n  height: 30px;\n  border: double 2px black;\n  color: black;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 20px;\n  font-weight: 600;\n  background-color: white;\n}\n\n.align {\n  margin-top: 15px;\n  float: right;\n}\n.table {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  position: relative;\n  animation-name: example;\n  animation-duration: 4s;\n}\n\n@keyframes example {\n  0%   {background-color:red; left:0px; top:0px;}\n  25%  {background-color:yellow; left:200px; top:0px;}\n  50%  {background-color:blue; left:200px; top:200px;}\n  75%  {background-color:green; left:0px; top:200px;}\n  100% {background-color:red; left:0px; top:0px;}\n}\n\n.animate {\n  animation: pulse 5s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    background-color: #001F3F;\n  }\n  100% {\n    background-color: #FF4136;\n  }\n}\n\n.demo {\n  background-color: hsl(207, 9%, 19%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 10vw;\n  width: 100%;\n}\n\n.perspective-container {\n  perspective: 400px;\n}\n\n.card {\n  background-image: url(https://media.giphy.com/media/sIIhZliB2McAo/giphy.gif);\n  background-size: cover;\n  box-shadow: 0 0 140px 10px rgba(0,0,0,.5);\n  position: relative;\n  height: 150px;\n  width: 250px;\n  overflow: hidden; /* Try removing this to see how the sheen works! */\n  --sheenX: 0; /* Set these with JavaScript */\n  --sheenY: 0;\n}\n\n.card::after {\n  content: "";\n  position: absolute;\n  top: -400px;\n  right: -400px;\n  bottom: -400px;\n  left: -400px;\n  background: linear-gradient(217deg, rgba(255,255,255,0), rgba(255,255,255,0) 35%, rgba(255,255,255,0.25) 45%, rgba(255,255,255,.25) 50%, rgba(255,255,255,0) 60%, rgba(255,255,255,0) 100%);\n  transform: translateX(var(--sheenX)) translateY(var(--sheenY));\n}'],sourceRoot:""}]);const c=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(r[A]=!0)}for(var c=0;c<e.length;c++){var i=[].concat(e[c]);o&&r[i[0]]||(t&&(i[2]?i[2]="".concat(t," and ").concat(i[2]):i[2]=t),n.push(i))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var t,o,r=(o=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var o,r,a=[],A=!0,c=!1;try{for(t=t.call(e);!(A=(o=t.next()).done)&&(a.push(o.value),!n||a.length!==n);A=!0);}catch(e){c=!0,r=e}finally{try{A||null==t.return||t.return()}finally{if(c)throw r}}return a}}(t,o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],A=r[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(i," */"),l=A.sources.map((function(e){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([s]).join("\n")}return[a].join("\n")}},300:(e,n)=>{var t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();e.exports=n=t.fetch,t.fetch&&(n.default=t.fetch.bind(t)),n.Headers=t.Headers,n.Request=t.Request,n.Response=t.Response},379:(e,n,t)=>{var o,r=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function A(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},o=[],r=0;r<e.length;r++){var c=e[r],i=n.base?c[0]+n.base:c[0],s=t[i]||0,l="".concat(i," ").concat(s);t[i]=s+1;var u=A(l),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(a[u].references++,a[u].updater(d)):a.push({identifier:l,updater:f(d,n),references:1}),o.push(l)}return o}function i(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var A=r(e.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(n)}return n}var s,l=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function u(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(n,r);else{var a=document.createTextNode(r),A=e.childNodes;A[n]&&e.removeChild(A[n]),A.length?e.insertBefore(a,A[n]):e.appendChild(a)}}function d(e,n,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,h=0;function f(e,n){var t,o,r;if(n.singleton){var a=h++;t=p||(p=i(n)),o=u.bind(null,t,a,!1),r=u.bind(null,t,a,!0)}else t=i(n),o=d.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=A(t[o]);a[r].references--}for(var i=c(e,n),s=0;s<t.length;s++){var l=A(t[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=i}}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),o=t(426);n()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const r=t(300),a=e=>{const n=document.querySelector(".highest"),t=document.querySelector(".highest_score");n.textContent=Object.values(e)[0][0].user,t.textContent=Object.values(e)[0][0].score;const o=document.querySelector(".shighest"),r=document.querySelector(".shighest_score");o.textContent=Object.values(e)[0][1].user,r.textContent=Object.values(e)[0][1].score;const a=document.querySelector(".lhighest"),A=document.querySelector(".lhighest_score");a.textContent=Object.values(e)[0][2].user,A.textContent=Object.values(e)[0][2].score;const c=document.querySelector(".ehighest"),i=document.querySelector(".ehighest_score");c.textContent=Object.values(e)[0][3].user,i.textContent=Object.values(e)[0][3].score;const s=document.querySelector(".fhighest"),l=document.querySelector(".fhighest_score");s.textContent=Object.values(e)[0][4].user,l.textContent=Object.values(e)[0][4].score;const u=document.querySelector(".thighest"),d=document.querySelector(".thighest_score");if(u.textContent=Object.values(e)[0][5].user,d.textContent=Object.values(e)[0][5].score,void 0!==Object.values(e)[0][6]){const n=document.querySelector(".yhighest"),t=document.querySelector(".yhighest_score");n.textContent=Object.values(e)[0][6].user,t.textContent=Object.values(e)[0][6].score}if(void 0!==Object.values(e)[0][7]){const n=document.querySelector(".khighest"),t=document.querySelector(".khighest_score");n.textContent=Object.values(e)[0][7].user,t.textContent=Object.values(e)[0][7].score}if(void 0!==Object.values(e)[0][8]){const n=document.querySelector(".zhighest"),t=document.querySelector(".zhighest_score");n.textContent=Object.values(e)[0][8].user,t.textContent=Object.values(e)[0][8].score}};async function A(){const e=await r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/zH4REzKr0jGOXCuqG8YJ/scores/");return await e.json()}r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/",{method:"POST",body:JSON.stringify({name:'Erez"s coolest game to date'}),headers:{"Content-type":"application/json; charset=UTF-8"}}).then((e=>e.json())).then((e=>console.log(e))),document.querySelector(".align").addEventListener("click",(()=>{const e=document.querySelector(".gname").value,n=document.querySelector(".gscore").value;r("https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/zH4REzKr0jGOXCuqG8YJ/scores",{method:"POST",body:JSON.stringify({user:e,score:n}),headers:{"Content-type":"application/json; charset=UTF-8"}}).then((e=>e.json())).then((e=>console.log(e))),document.querySelector(".gname").value="",document.querySelector(".gscore").value="",event.preventDefault()})),A().then((e=>{a(e)})),document.querySelector(".refresh").addEventListener("click",(()=>{A().then((e=>{a(e)})),document.querySelector(".refresh").className="animate"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,